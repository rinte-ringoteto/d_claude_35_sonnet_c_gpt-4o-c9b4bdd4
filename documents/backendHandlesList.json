{
  "key": "backendHandlesList",
  "value": [
    {
      "fileName": "auth.ts",
      "handleProcedure": "1. クライアントから受け取ったメールアドレスとパスワードを検証\n2. データベースでユーザー情報を確認\n3. パスワードのハッシュを比較\n4. 認証成功時にJWTトークンを生成\n5. 生成したトークンをクライアントに返す",
      "relatedScreen": "SCR-001",
      "handleName": "ユーザー認証",
      "description": "ユーザーのログイン認証を処理し JWTトークンを発行する",
      "id": "BAC-001",
      "category": "認証",
      "relatedFrontendCode": "tsx\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { AiOutlineMail, AiOutlineLock } from 'react-icons/ai';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\n\nconst Login = () => {\n    const [email, setEmail] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const router = useRouter();\n\n    const handleLogin = async () => {\n        try {\n            const { data, error } = await supabase.auth.signInWithPassword({\n                email: email,\n                password: password,\n            });\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            // ログインに成功したらユーザー情報をusersテーブルから取得\n            const { data: user, error: userFetchError } = await supabase\n                .from('users')\n                .select('*')\n                .eq('email', email)\n                .single();\n\n            if (userFetchError || !user) {\n                throw new Error('ユーザー情報の取得に失敗しました。');\n            }\n\n            // 認証に成功したらダッシュボードにリダイレクト\n            router.push('/dashboard');\n        } catch (error: any) {\n            setErrorMessage(error.message);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-[#F8F8F8]\">\n            <Topbar />\n            <div className=\"flex flex-col items-center justify-center h-full pt-16\">\n                <div className=\"bg-white p-8 shadow-lg rounded-lg max-w-sm w-full\">\n                    <h2 className=\"text-[#4A90E2] text-2xl font-bold mb-6 text-center\">ログイン</h2>\n                    {errorMessage && (\n                        <p className=\"text-red-600 text-center mb-4\">{errorMessage}</p>\n                    )}\n                    \n                    <div className=\"mb-4\">\n                        <label htmlFor=\"email\" className=\"text-gray-700\">\n                            メールアドレス\n                        </label>\n                        <div className=\"flex items-center border-b-2 border-gray-300 focus-within:border-[#4A90E2] mt-2\">\n                            <AiOutlineMail size={24} className=\"text-gray-500 mr-2\" />\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                                className=\"flex-1 py-2 focus:outline-none\"\n                                placeholder=\"メールアドレスを入力\"\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"mb-6\">\n                        <label htmlFor=\"password\" className=\"text-gray-700\">\n                            パスワード\n                        </label>\n                        <div className=\"flex items-center border-b-2 border-gray-300 focus-within:border-[#4A90E2] mt-2\">\n                            <AiOutlineLock size={24} className=\"text-gray-500 mr-2\" />\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                className=\"flex-1 py-2 focus:outline-none\"\n                                placeholder=\"パスワードを入力\"\n                            />\n                        </div>\n                    </div>\n\n                    <button\n                        onClick={handleLogin}\n                        className=\"bg-[#4A90E2] text-white py-2 px-4 rounded-md w-full text-center hover:bg-blue-700 transition duration-300\"\n                    >\n                        ログイン\n                    </button>\n\n                    <div className=\"text-center mt-6\">\n                        <a\n                            href=\"#\"\n                            className=\"text-[#4A90E2] hover:underline\"\n                            onClick={() => router.push('/password-reset')}\n                        >\n                            パスワードを忘れましたか？\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;"
    },
    {
      "fileName": "file-upload.ts",
      "handleProcedure": "1. マルチパートフォームデータを解析\n2. ファイルの種類とサイズを検証\n3. 一時的なストレージにファイルを保存\n4. 保存されたファイルのパスをデータベースに記録\n5. ファイルの保存場所情報をクライアントに返す",
      "relatedScreen": "SCR-003",
      "handleName": "ファイルアップロード処理",
      "description": "クライアントからアップロードされたファイルを受け取り 一時保存する",
      "id": "BAC-002",
      "category": "ファイル処理",
      "relatedFrontendCode": "tsx\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { AiOutlineCloudUpload, AiOutlineFileText } from 'react-icons/ai';\nimport { useSupabaseClient, useSession } from '@supabase/auth-helpers-react';\nimport axios from 'axios';\nimport Topbar from '@/components/Topbar';\n\nexport default function FileUploadScreen() {\n    const [file, setFile] = useState<File | null>(null);\n    const [uploading, setUploading] = useState(false);\n    const router = useRouter();\n    const supabase = useSupabaseClient();\n    const session = useSession();\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files && event.target.files[0]) {\n            setFile(event.target.files[0]);\n        }\n    };\n\n    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n    };\n\n    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        const droppedFile = event.dataTransfer.files[0];\n        setFile(droppedFile);\n    };\n\n    const handleFileUpload = async () => {\n        if (!file) return;\n        setUploading(true);\n\n        try {\n            // Upload file via axios to the backend API\n            const formData = new FormData();\n            formData.append('file', file);\n            const { data } = await axios.post('/api/file-upload.ts', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n\n            // After file upload success, redirect to document generation page\n            router.push('/document-generation');\n        } catch (error) {\n            console.error('File upload failed', error);\n            alert('ファイルアップロードに失敗しました。');\n        } finally {\n            setUploading(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"container mx-auto p-8\">\n                <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">ファイルアップロード</h1>\n\n                <div\n                    className=\"w-full p-6 border-2 border-dashed border-gray-400 bg-white flex justify-center items-center mb-4\"\n                    onDragOver={handleDragOver}\n                    onDrop={handleDrop}\n                >\n                    <AiOutlineFileText className=\"text-gray-400 text-6xl\" />\n                    <input type=\"file\" className=\"hidden\" id=\"file-upload\" onChange={handleFileChange} />\n                    <label htmlFor=\"file-upload\" className=\"cursor-pointer text-blue-500\">\n                        ここにファイルをドラッグ&ドロップするか、クリックして選択してください。\n                    </label>\n                </div>\n\n                {file && (\n                    <div className=\"text-gray-800 mb-4\">\n                        <p>\n                            選択されたファイル: <span className=\"font-semibold\">{file.name}</span>\n                        </p>\n                    </div>\n                )}\n\n                <button\n                    className={`w-full bg-blue-500 text-white py-3 rounded-md flex justify-center items-center ${uploading ? 'opacity-50' : ''\n                        }`}\n                    onClick={handleFileUpload}\n                    disabled={uploading}\n                >\n                    <AiOutlineCloudUpload className=\"mr-2\" />\n                    {uploading ? 'アップロード中...' : 'ファイルをアップロード'}\n                </button>\n            </div>\n        </div>\n    );\n}"
    },
    {
      "fileName": "document-generation.ts",
      "handleProcedure": "1. データベースから対象ファイルの情報を取得\n2. ファイルの内容を読み込み\n3. AIモデルにファイル内容を入力し ドキュメントを生成\n4. 生成されたドキュメントをフォーマット\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
      "relatedScreen": "SCR-004",
      "handleName": "ドキュメント生成",
      "description": "アップロードされたファイルの内容を分析し AIを使用して開発ドキュメントを生成する",
      "id": "BAC-003",
      "category": "AI処理",
      "relatedFrontendCode": "tsx\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { AiOutlineFile, AiOutlineCheckCircle } from 'react-icons/ai';\nimport { BiLoaderCircle } from 'react-icons/bi';\nimport Topbar from '@/components/Topbar';\nimport supabase from '@/supabase';\nimport Link from 'next/link';\n\nexport default function DocumentGeneration() {\n    const router = useRouter(); \n    const [documentType, setDocumentType] = useState<string>('要件定義');\n    const [generationState, setGenerationState] = useState<'idle' | 'loading' | 'completed'>('idle');\n    const [progress, setProgress] = useState<number>(0);\n    const [error, setError] = useState<string | null>(null);\n\n    const userAuthenticated = async () => {\n        const { data, error } = await supabase.auth.getSession();\n        if (!data.session || error) {\n            router.push('/login');\n        }\n    };\n\n    useEffect(() => {\n        userAuthenticated();\n    }, []);\n\n    const handleGenerateDocument = async () => {\n        setGenerationState('loading');\n        setProgress(0);\n\n        try {\n            const response = await axios.get('/api/document-generation', {\n                params: { type: documentType },\n                onDownloadProgress: (progressEvent) => {\n                    let percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                    setProgress(percent);\n                },\n            });\n\n            if (response.data.success) {\n                setGenerationState('completed');\n                setTimeout(() => router.push('/document-display'), 2000);\n            }\n        } catch (error) {\n            setError('ドキュメント生成に失敗しました。');\n            setGenerationState('idle');\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-[#F8F8F8] text-[#333333]\">\n            <Topbar />\n            <div className=\"flex\">\n                <Sidebar />\n                <div className=\"container mx-auto p-8\">\n                    <h1 className=\"text-2xl font-bold text-[#4A90E2] mb-8\">ドキュメント生成</h1>\n                    <div className=\"max-w-lg border p-6 rounded-lg bg-white shadow-md\">\n                        <div className=\"mb-4\">\n                            <label className=\"block text-sm font-semibold\">ドキュメントの種類:</label>\n                            <select\n                                value={documentType}\n                                onChange={(e) => setDocumentType(e.target.value)}\n                                className=\"w-full mt-2 p-2 border-b focus:border-[#4A90E2] outline-none\"\n                            >\n                                <option value=\"要件定義\">要件定義</option>\n                                <option value=\"システム設計\">システム設計</option>\n                                <option value=\"開発\">開発</option>\n                                <option value=\"テスト\">テスト</option>\n                                <option value=\"提案資料\">提案資料</option>\n                            </select>\n                        </div>\n\n                        {generationState === 'idle' && (\n                            <button\n                                onClick={handleGenerateDocument}\n                                className=\"w-full p-3 text-white bg-[#4A90E2] rounded-lg font-medium hover:bg-opacity-90 transition duration-300\"\n                            >\n                                生成開始\n                            </button>\n                        )}\n\n                        {generationState === 'loading' && (\n                            <div className=\"text-center\">\n                                <BiLoaderCircle className=\"animate-spin text-5xl text-[#50E3C2] mx-auto mt-4\" />\n                                <p className=\"mt-2\">生成中... {progress}%</p>\n                            </div>\n                        )}\n\n                        {generationState === 'completed' && (\n                            <div className=\"text-center\">\n                                <AiOutlineCheckCircle className=\"text-5xl text-[#50E3C2] mx-auto mt-4\" />\n                                <p className=\"mt-2\">生成完了！ドキュメント表示画面へ自動遷移します。</p>\n                            </div>\n                        )}\n\n                        {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction Sidebar() {\n    return (\n        <div className=\"w-64 p-4 bg-white min-h-screen border-r\">\n            <ul>\n                <li className=\"mb-4\">\n                    <Link href=\"/dashboard\">\n                        <a className=\"flex items-center p-2 hover:bg-[#F5A623] rounded transition\">\n                            <AiOutlineFile className=\"mr-2\" /> ダッシュボード\n                        </a>\n                    </Link>\n                </li>\n                <li className=\"mb-4\">\n                    <Link href=\"/file-upload\">\n                        <a className=\"flex items-center p-2 hover:bg-[#F5A623] rounded transition\">\n                            <AiOutlineFile className=\"mr-2\" /> ファイルアップロード\n                        </a>\n                    </Link>\n                </li>\n                <li className=\"mb-4\">\n                    <Link href=\"/document-generation\">\n                        <a className=\"flex items-center p-2 bg-[#4A90E2] text-white rounded transition\">\n                            <AiOutlineFile className=\"mr-2\" /> ドキュメント生成\n                        </a>\n                    </Link>\n                </li>\n                <li className=\"mb-4\">\n                    <Link href=\"/source-code-generation\">\n                        <a className=\"flex items-center p-2 hover:bg-[#F5A623] rounded transition\">\n                            <AiOutlineFile className=\"mr-2\" /> ソースコード生成\n                        </a>\n                    </Link>\n                </li>\n                <li className=\"mb-4\">\n                    <Link href=\"/quality-check\">\n                        <a className=\"flex items-center p-2 hover:bg-[#F5A623] rounded transition\">\n                            <AiOutlineFile className=\"mr-2\" /> 品質チェック\n                        </a>\n                    </Link>\n                </li>\n            </ul>\n        </div>\n    );\n}"
    },
    {
      "fileName": "code-generation.ts",
      "handleProcedure": "1. データベースから対象ドキュメントの情報を取得\n2. ドキュメントの内容を解析\n3. AIモデルにドキュメント内容を入力し ソースコードを生成\n4. 生成されたコードをフォーマットおよび最適化\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
      "relatedScreen": "SCR-005",
      "handleName": "ソースコード生成",
      "description": "生成された開発ドキュメントを基に AIを使用してソースコードを生成する",
      "id": "BAC-004",
      "category": "AI処理",
      "relatedFrontendCode": "tsx\nimport { useEffect, useState } from 'react';\nimport Topbar from '@/components/Topbar';\nimport { useRouter } from 'next/router';\nimport { DocumentTextIcon, CodeIcon, PlayIcon } from 'react-icons/hi';\nimport { CircularProgress } from '@mui/material';\nimport axios from 'axios';\nimport { createClient } from '@supabase/supabase-js';\nimport '@/styles/globals.css';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);\n\nconst CodeGeneration = () => {\n    const router = useRouter();\n    \n    const [documents, setDocuments] = useState([]);\n    const [selectedDocument, setSelectedDocument] = useState('');\n    const [selectedLanguage, setSelectedLanguage] = useState('');\n    const [progress, setProgress] = useState(0);\n    const [isGenerating, setIsGenerating] = useState(false);\n\n    useEffect(() => {\n        async function fetchDocuments() {\n            const { data, error } = await supabase\n                .from('documents')\n                .select('*');\n\n            if (error) {\n                console.log('Error fetching documents', error);\n                setDocuments([\n                    { id: 'sample-doc-1', name: '要件定義書' },\n                    { id: 'sample-doc-2', name: 'システム設計書' },\n                ]);\n            } else {\n                setDocuments(data);\n            }\n        }\n\n        fetchDocuments();\n    }, []);\n\n    const handleGenerationStart = async () => {\n        if (!selectedDocument || !selectedLanguage) {\n            alert('生成対象とプログラミング言語を選択してください。');\n            return;\n        }\n\n        setIsGenerating(true);\n        setProgress(0);\n\n        try {\n            const response = await axios.post('/api/code-generation', {\n                documentId: selectedDocument,\n                language: selectedLanguage,\n            });\n\n            // Simulating real-time progress update\n            let progressInterval = setInterval(() => {\n                setProgress(prevProgress => {\n                    if (prevProgress >= 100) {\n                        clearInterval(progressInterval);\n                        router.push('/source-code-view');\n                    }\n                    return prevProgress + 10;\n                });\n            }, 500);\n\n        } catch (error) {\n            console.error('Error generating code:', error);\n            setIsGenerating(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-50\">\n            <Topbar />\n            <div className=\"flex flex-col lg:flex-row\">\n                <Sidebar />\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">ソースコード生成</h1>\n\n                    <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-lg mb-2\">生成対象のドキュメントを選択</label>\n                        <select \n                            value={selectedDocument} \n                            onChange={(e) => setSelectedDocument(e.target.value)} \n                            className=\"border-b-2 border-gray-400 focus:border-blue-500 pb-1 w-full\"\n                        >\n                            <option value=\"\" disabled>--- ドキュメントを選択してください ---</option>\n                            {documents.map(doc => (\n                                <option key={doc.id} value={doc.id}>{doc.name}</option>\n                            ))}\n                        </select>\n                    </div>\n\n                    <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-lg mb-2\">生成するプログラミング言語を選択</label>\n                        <select\n                            value={selectedLanguage}\n                            onChange={(e) => setSelectedLanguage(e.target.value)}\n                            className=\"border-b-2 border-gray-400 focus:border-blue-500 pb-1 w-full\"\n                        >\n                            <option value=\"\" disabled>--- 言語を選択してください ---</option>\n                            <option value=\"typescript\">TypeScript</option>\n                            <option value=\"javascript\">JavaScript</option>\n                            <option value=\"python\">Python</option>\n                            <option value=\"java\">Java</option>\n                        </select>\n                    </div>\n\n                    <button\n                        onClick={handleGenerationStart}\n                        className={`mt-8 w-full bg-blue-500 text-white font-medium py-2 rounded-md hover:bg-blue-600 transition ${isGenerating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        disabled={isGenerating}\n                    >\n                        {isGenerating ? (\n                            <div className=\"flex items-center justify-center\">\n                                <CircularProgress size={20} className=\"mr-2\" />\n                                生成中...\n                            </div>\n                        ) : (\n                            <>\n                                <PlayIcon className=\"inline-block mr-2\" />\n                                生成開始\n                            </>\n                        )}\n                    </button>\n\n                    {isGenerating && (\n                        <div className=\"mt-8\">\n                            <h2 className=\"text-lg text-gray-700\">生成進捗</h2>\n                            <div className=\"w-full bg-gray-200 rounded-full h-4 mt-2\">\n                                <div \n                                    className=\"bg-blue-500 h-4 rounded-full transition-all\"\n                                    style={{ width: `${progress}%` }}\n                                ></div>\n                            </div>\n                        </div>\n                    )}\n                </main>\n            </div>\n        </div>\n    );\n};\n\nconst Sidebar = () => {\n    return (\n        <div className=\"w-full lg:w-64 bg-white shadow-md h-full\">\n            <div className=\"p-8\">\n                <ul>\n                    <SidebarItem href=\"/dashboard\" label=\"ダッシュボード\" icon={<CodeIcon />} />\n                    <SidebarItem href=\"/document-upload\" label=\"ドキュメント生成\" icon={<DocumentTextIcon />} />\n                    <SidebarItem href=\"/quality-check\" label=\"品質チェック\" icon={<DocumentTextIcon />} />\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nconst SidebarItem = ({ href, label, icon }: { href: string, label: string, icon: React.ReactNode }) => {\n    const router = useRouter();\n\n    return (\n        <li \n            className={`flex items-center py-4 px-4 mb-2 rounded hover:bg-gray-100 cursor-pointer ${router.pathname === href ? 'bg-gray-200' : ''}`}\n            onClick={() => router.push(href)}\n        >\n            {icon}\n            <span className=\"ml-4\">{label}</span>\n        </li>\n    );\n};\n\nexport default CodeGeneration;"
    },
    {
      "fileName": "quality-check.ts",
      "handleProcedure": "1. データベースから対象ドキュメントとコードを取得\n2. ドキュメントの一貫性と完全性をチェック\n3. コードの構文エラーおよびベストプラクティス違反をチェック\n4. チェック結果をスコア化\n5. 詳細な問題点と改善提案を生成\n6. チェック結果をデータベースに保存\n7. 結果サマリーをクライアントに送信",
      "relatedScreen": "SCR-006",
      "handleName": "自動品質チェック",
      "description": "生成されたドキュメントとソースコードの品質を自動でチェックする",
      "id": "BAC-005",
      "category": "品質管理",
      "relatedFrontendCode": "tsx\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\nimport { FiCheck, FiXCircle } from 'react-icons/fi';\nimport { ProgressBar } from 'react-bootstrap';\n\nexport default function QualityCheck() {\n  const [documents, setDocuments] = useState([]);\n  const [sourceCodes, setSourceCodes] = useState([]);\n  const [selectedTarget, setSelectedTarget] = useState<string | null>(null);\n  const [progress, setProgress] = useState(0);\n  const [isChecking, setIsChecking] = useState(false);\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!supabase.auth.user()) {\n      router.push('/login');\n    } else {\n      // Load Available Documents and Source Codes\n      fetchQualityData();\n    }\n  }, []);\n\n  const fetchQualityData = async () => {\n    try {\n      const { data: docData, error: docError } = await supabase.from('documents').select('*');\n      const { data: codeData, error: codeError } = await supabase.from('source_codes').select('*');\n      \n      if (docError || codeError) throw new Error('Error fetching data');\n      setDocuments(docData || []);\n      setSourceCodes(codeData || []);\n    } catch (e) {\n      setError('データの取得に失敗しました。サンプルデータを使用しています。');\n      setDocuments([{ id: 'sample-doc-id', type: '要件定義', content: '{}' }]);\n      setSourceCodes([{ id: 'sample-code-id', file_name: 'sample.ts', content: '' }]);\n    }\n  };\n\n  const startQualityCheck = async () => {\n    if (!selectedTarget) {\n      setError('チェック対象を選択してください。');\n      return;\n    }\n\n    setIsChecking(true);\n    try {\n      const { data } = await axios.post('/api/quality-check', { target: selectedTarget });\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        setProgress(progress);\n        if (progress >= 100) {\n          clearInterval(interval);\n          router.push('/quality-check-result');\n        }\n      }, 500);\n    } catch (err) {\n      console.error(err);\n      setError('チェックプロセス中にエラーが発生しました。');\n    }\n    setIsChecking(false);\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <main className=\"container mx-auto p-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-8\">品質チェック</h1>\n\n        {/* チェック対象の選択 */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-700\">チェック対象を選択</h2>\n          <div className=\"flex gap-4 mt-4\">\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold\">ドキュメント</h3>\n              {documents.length ? docsList : <NoData type=\"ドキュメント\" />}\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold\">ソースコード</h3>\n              {sourceCodes.length ? codesList : <NoData type=\"ソースコード\" />}\n            </div>\n          </div>\n        </div>\n\n        {/* エラーメッセージ */}\n        {error && <p className=\"text-red-600 mb-8\">{error}</p>}\n\n        {/* チェック開始ボタン */}\n        <div className=\"mb-8\">\n          <button\n            className={`${\n              isChecking ? 'bg-gray-500' : 'bg-blue-500 hover:bg-blue-600'\n            } text-white px-4 py-2 rounded transition duration-300`}\n            onClick={startQualityCheck}\n            disabled={isChecking}\n          >\n            {isChecking ? 'チェック中...' : 'チェック開始'}\n          </button>\n        </div>\n\n        {/* プログレスバー */}\n        {isChecking && (\n          <div className=\"mb-8\">\n            <h3 className=\"text-md font-semibold text-gray-600 mb-4\">チェック進捗確認中</h3>\n            <ProgressBar now={progress} label={`${progress}%`} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n  \n  function docsList() {\n    return (\n      <ul className=\"bg-white shadow-md rounded p-4\">\n        {documents.map((doc) => (\n          <li\n            key={doc.id}\n            className={`p-2 cursor-pointer hover:bg-gray-100 rounded ${selectedTarget === doc.id ? 'bg-blue-100' : ''}`}\n            onClick={() => setSelectedTarget(doc.id)}\n          >\n            {doc.type}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  function codesList() {\n    return (\n      <ul className=\"bg-white shadow-md rounded p-4\">\n        {sourceCodes.map((code) => (\n          <li\n            key={code.id}\n            className={`p-2 cursor-pointer hover:bg-gray-100 rounded ${selectedTarget === code.id ? 'bg-blue-100' : ''}`}\n            onClick={() => setSelectedTarget(code.id)}\n          >\n            {code.file_name}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  function NoData({ type }: { type: string }) {\n    return (\n      <div className=\"flex justify-center items-center p-4 h-full text-gray-500\">\n        <FiXCircle className=\"mr-2\" /> {type}がありません。\n      </div>\n    );\n  }\n}"
    },
    {
      "fileName": "consistency-check.ts",
      "handleProcedure": "1. データベースから関連するすべてのドキュメントを取得\n2. ドキュメント間の関連性を分析\n3. キーワードと概念の一貫性をチェック\n4. 要件とデザインの追跡可能性を確認\n5. 不整合箇所を特定し リスト化\n6. 整合性スコアを計算\n7. チェック結果と修正提案をデータベースに保存\n8. 結果サマリーをクライアントに送信",
      "relatedScreen": "SCR-007",
      "handleName": "ドキュメント整合性チェック",
      "description": "各工程間のドキュメントの整合性を自動でチェックし確保する",
      "id": "BAC-006",
      "category": "品質管理",
      "relatedFrontendCode": "typescript\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ProgressBar } from 'react-bootstrap';\nimport { useRouter } from 'next/router';\nimport { FaCheckCircle, FaPlay } from 'react-icons/fa';\nimport Topbar from '@/components/Topbar';\nimport supabase from '@/supabase';\n\ntype Document = {\n    id: string;\n    name: string;\n    type: string;\n};\n\nconst ConsistencyCheck = () => {\n    const router = useRouter();\n    const [documents, setDocuments] = useState<Document[]>([]);\n    const [selectedDocumentId, setSelectedDocumentId] = useState<string | null>(null);\n    const [progress, setProgress] = useState<number>(0);\n    const [checking, setChecking] = useState<boolean>(false);\n\n    // Supabase authentication\n    const [user, setUser] = useState<any>(null);\n    const checkAuth = async () => {\n        const { data, error } = await supabase.auth.getSession();\n        if (error || !data.session) {\n            router.push('/login');\n        } else {\n            setUser(data.session.user);\n        }\n    };\n\n    useEffect(() => {\n        const fetchDocuments = async () => {\n            const { data, error } = await supabase\n                .from('documents')\n                .select('*');\n            if (error) {\n                setDocuments([\n                    { id: '1', name: '要件定義書', type: '要件定義' },\n                    { id: '2', name: 'システム設計書', type: 'システム設計' }\n                ]);\n            } else {\n                setDocuments(data);\n            }\n        };\n\n        fetchDocuments();\n        checkAuth();\n    }, []);\n\n    const startCheck = async () => {\n        if (!selectedDocumentId || checking) return;\n        setChecking(true);\n\n        try {\n            const response = await axios.post('/api/consistency-check', {\n                documentId: selectedDocumentId\n            });\n\n            if (response.status === 200) {\n                let interval = setInterval(() => {\n                    setProgress((prev) => {\n                        if (prev >= 100) {\n                            clearInterval(interval);\n                            router.push('/consistency-check-result');\n                        }\n                        return prev + 10;\n                    });\n                }, 300);\n            }\n        } catch (error) {\n            alert('チェックに失敗しました。再試行してください。');\n            setChecking(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex\">\n                <aside className=\"w-64 bg-white shadow-lg\">\n                    <ul className=\"flex flex-col py-4\">\n                        <li className=\"text-gray-700 text-lg font-bold px-8 py-4\">\n                            <FaCheckCircle className=\"inline mr-2\"/> 整合性チェック\n                        </li>\n                        <li className=\"px-8 py-2 hover:bg-gray-200\">\n                            <a href=\"/document-generation\" className=\"block text-gray-600\">ドキュメント生成</a>\n                        </li>\n                        <li className=\"px-8 py-2 hover:bg-gray-200\">\n                            <a href=\"/source-code-generation\" className=\"block text-gray-600\">ソースコード生成</a>\n                        </li>\n                        <li className=\"px-8 py-2 hover:bg-gray-200\">\n                            <a href=\"/quality-check\" className=\"block text-gray-600\">品質チェック</a>\n                        </li>\n                    </ul>\n                </aside>\n\n                <main className=\"flex-1 p-8\">\n                    <div className=\"bg-white p-6 rounded shadow-md\">\n                        <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">ドキュメント選択</h1>\n\n                        <div className=\"mb-6\">\n                            <label className=\"text-gray-700 font-semibold\">ドキュメントを選択してください</label>\n                            <select\n                                className=\"block w-full mt-2 p-2 border border-gray-300 rounded\"\n                                value={selectedDocumentId || ''}\n                                onChange={(e) => setSelectedDocumentId(e.target.value)}\n                            >\n                                <option value=\"\">選択</option>\n                                {documents.map((doc) => (\n                                    <option key={doc.id} value={doc.id}>\n                                        {doc.name} - {doc.type}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n\n                        <div className=\"flex justify-between items-center\">\n                            <button\n                                className={`px-6 py-2 rounded text-white font-medium ${\n                                    checking ? 'bg-gray-400' : 'bg-blue-500 hover:bg-blue-600'\n                                }`}\n                                onClick={startCheck}\n                                disabled={checking || !selectedDocumentId}\n                            >\n                                <FaPlay className=\"inline mr-2\" />\n                                {checking ? 'チェック中...' : 'チェック開始'}\n                            </button>\n\n                            {checking && (\n                                <div className=\"w-full ml-4\">\n                                    <ProgressBar animated striped now={progress} label={`${progress}%`} />\n                                </div>\n                            )}\n                        </div>\n\n                        <div className=\"mt-6 text-gray-500 text-sm\">\n                            <img src=\"https://placehold.co/600x400\" alt=\"placeholder\" className=\"w-full h-auto rounded\" />\n                            チェック完了後、自動的に結果画面へ遷移します。\n                        </div>\n                    </div>\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default ConsistencyCheck;"
    },
    {
      "fileName": "work-estimation.ts",
      "handleProcedure": "1. データベースからプロジェクト関連のすべての成果物を取得\n2. ドキュメントの量と複雑さを分析\n3. コードの行数と複雑度を計算\n4. 過去のプロジェクトデータと比較\n5. AIモデルを使用して各フェーズの工数を予測\n6. 総工数と内訳を計算\n7. 見積結果をデータベースに保存\n8. 見積サマリーをクライアントに送信",
      "relatedScreen": "SCR-008",
      "handleName": "自動工数見積",
      "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる",
      "id": "BAC-007",
      "category": "プロジェクト管理",
      "relatedFrontendCode": "tsx\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { AiOutlineLoading3Quarters } from 'react-icons/ai';\n\nconst WorkEstimation = () => {\n    const router = useRouter();\n    const [projects, setProjects] = useState<any[]>([]);\n    const [selectedProject, setSelectedProject] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [progress, setProgress] = useState<number>(0);\n    const [estimateResult, setEstimateResult] = useState<any | null>(null);\n\n    useEffect(() => {\n        const fetchProjects = async () => {\n            const user = supabase.auth.user();\n            if (!user) {\n                router.push('/login');\n                return;\n            }\n\n            try {\n                const { data, error } = await supabase\n                    .from('projects')\n                    .select('*')\n                    .eq('created_by', user.id);\n\n                if (error) throw error;\n                setProjects(data || []);\n            } catch (err) {\n                setProjects([\n                    // サンプルデータ\n                    { id: 'sample-1', name: 'サンプルプロジェクト1' },\n                    { id: 'sample-2', name: 'サンプルプロジェクト2' },\n                ]);\n            }\n        };\n\n        fetchProjects();\n    }, []);\n\n    const handleStartEstimate = async () => {\n        if (!selectedProject) return;\n        setIsLoading(true);\n        setProgress(0);\n\n        try {\n            // Progress simulation\n            const progressInterval = setInterval(() => {\n                setProgress((prev) => (prev < 100 ? prev + 10 : 100));\n            }, 1000);\n\n            // Backend API呼び出しフロー (見積リクエスト)\n            const { data, error } = await supabase\n                .from('work_estimates')\n                .select('*')\n                .eq('project_id', selectedProject);\n\n            if (error) throw error;\n\n            setTimeout(() => {\n                clearInterval(progressInterval);\n                setIsLoading(false);\n                setEstimateResult(data);\n                router.push('/work-estimation-result');\n            }, 10000); // Mock estimation process delay\n\n        } catch (err) {\n            setIsLoading(false);\n            // サンプルデータを反映\n            setEstimateResult({\n                total_hours: 200,\n                breakdown: [\n                    { phase: '要件定義', hours: 40 },\n                    { phase: '設計', hours: 60 },\n                    { phase: '開発', hours: 80 },\n                    { phase: 'テスト', hours: 20 },\n                ],\n            });\n            router.push('/work-estimation-result');\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-[#F8F8F8]\">\n            <Topbar />\n            <div className=\"flex\">\n                <div className=\"w-64 h-screen bg-[#4A90E2] flex flex-col text-white\">\n                    <h2 className=\"text-2xl font-bold p-4\">メニュー</h2>\n                    <ul className=\"flex flex-col px-4\">\n                        <li className=\"mb-4\">\n                            <a href=\"/dashboard\" className=\"hover:underline\">ダッシュボード</a>\n                        </li>\n                        <li className=\"mb-4\">\n                            <a href=\"/file-upload\" className=\"hover:underline\">ファイルアップロード</a>\n                        </li>\n                        <li className=\"mb-4\">\n                            <a href=\"/document-generation\" className=\"hover:underline\">ドキュメント生成</a>\n                        </li>\n                        <li className=\"mb-4\">\n                            <a href=\"/source-code-generation\" className=\"hover:underline\">ソースコード生成</a>\n                        </li>\n                        <li className=\"mb-4\">\n                            <a href=\"/work-estimation\" className=\"hover:underline font-bold\">工数見積</a>\n                        </li>\n                    </ul>\n                </div>\n\n                <div className=\"flex-1 p-8\">\n                    <h1 className=\"text-3xl font-bold mb-8\">工数見積画面</h1>\n                    <p className=\"text-lg mb-6\">プロジェクトを選択し、工数見積を開始してください。</p>\n\n                    <label className=\"block mb-4 text-lg\">見積対象プロジェクト</label>\n                    <select\n                        className=\"p-2 rounded border-2 border-gray-300 mb-8\"\n                        value={selectedProject || \"\"}\n                        onChange={(e) => setSelectedProject(e.target.value)}\n                    >\n                        <option value=\"\" disabled>プロジェクトを選択してください</option>\n                        {projects.map((project) => (\n                            <option key={project.id} value={project.id}>\n                                {project.name}\n                            </option>\n                        ))}\n                    </select>\n\n                    <button\n                        className=\"bg-[#4A90E2] text-white text-lg px-6 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400\"\n                        onClick={handleStartEstimate}\n                        disabled={!selectedProject || isLoading}\n                    >\n                        {isLoading ? \"見積中...\" : \"見積開始\"}\n                    </button>\n\n                    {isLoading && (\n                        <div className=\"mt-8 flex items-center\">\n                            <AiOutlineLoading3Quarters className=\"animate-spin text-3xl mr-2 text-[#F5A623]\" />\n                            <p>{progress}% 完了</p>\n                        </div>\n                    )}\n\n                    {estimateResult && (\n                        <div className=\"mt-8\">\n                            <h2 className=\"text-2xl font-bold\">見積結果</h2>\n                            <p className=\"mt-2 text-lg\">総工数: {estimateResult.total_hours} 時間</p>\n                            <ul className=\"mt-4\">\n                                {estimateResult.breakdown.map((item: any, index: number) => (\n                                    <li key={index} className=\"mt-2\">\n                                        {item.phase}: {item.hours} 時間\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WorkEstimation;"
    },
    {
      "fileName": "proposal-creation.ts",
      "handleProcedure": "1. データベースからプロジェクト情報と関連ドキュメントを取得\n2. 選択されたテンプレートを読み込み\n3. ドキュメントから重要な情報を抽出\n4. テンプレートに情報を適用し 提案資料を生成\n5. 生成された資料を最適化およびフォーマット\n6. 資料をPDF形式に変換\n7. 生成された資料をデータベースに保存\n8. 資料のURLをクライアントに送信",
      "relatedScreen": "SCR-009",
      "handleName": "提案資料自動作成",
      "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する",
      "id": "BAC-008",
      "category": "資料作成",
      "relatedFrontendCode": "tsx\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport { BsFillPlayFill } from 'react-icons/bs';\nimport { AiOutlineFile } from 'react-icons/ai';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport axios from 'axios';\n\nconst ProposalCreation = () => {\n    const router = useRouter();\n    const [projects, setProjects] = useState([]);\n    const [templates, setTemplates] = useState([]);\n    const [selectedProject, setSelectedProject] = useState<string | null>(null);\n    const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n    const [progress, setProgress] = useState<number>(0);\n    const [isGenerating, setIsGenerating] = useState(false);\n\n    useEffect(() => {\n        const fetchProjectsAndTemplates = async () => {\n            const projectRes = await supabase.from('projects').select('*').eq('created_by', supabase.auth.user()?.id);\n            const templateRes = await axios.get('/api/templates');\n            if (projectRes.error || !projectRes.data) {\n                setProjects([{ id: 'sample-project', name: 'サンプルプロジェクト' }]); // Fallback on error\n            } else {\n                setProjects(projectRes.data);\n            }\n            if (!templateRes.data) {\n                setTemplates([{ id: 'sample-template', name: 'サンプルテンプレート' }]); // Fallback on error\n            } else {\n                setTemplates(templateRes.data);\n            }\n        };\n        fetchProjectsAndTemplates();\n    }, []);\n\n    const handleGenerate = async () => {\n        setIsGenerating(true);\n        setProgress(0); // Reset progress on new task\n\n        try {\n            // Simulate progress increase\n            const interval = setInterval(() => {\n                setProgress(old => {\n                    const newProgress = old + 10;\n                    if (newProgress >= 100) {\n                        clearInterval(interval);\n                        router.push('/proposal-display');\n                    }\n                    return newProgress;\n                });\n            }, 1000);\n\n            // Backend call to generate the document\n            const response = await axios.post('/api/proposal-creation', {\n                projectId: selectedProject,\n                templateId: selectedTemplate,\n            });\n            if (response.status !== 200) throw new Error('生成に失敗しました');\n\n            // Placeholder for completion simulation after API response\n        } catch (error) {\n            console.error('Error generating the document:', error);\n        } finally {\n            setIsGenerating(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n\n            <div className=\"container mx-auto py-8\">\n                <div className=\"grid grid-cols-12 gap-8\">\n                    <div className=\"col-span-3\">\n                        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n                            <h2 className=\"text-xl font-bold mb-4\">プロジェクト選択</h2>\n                            <ul>\n                                {projects.map(project => (\n                                    <li key={project.id} className=\"mb-2\">\n                                        <button\n                                            className={`w-full text-left px-4 py-2 rounded-lg ${selectedProject === project.id\n                                                ? 'bg-blue-500 text-white'\n                                                : 'bg-gray-200 text-gray-700'\n                                                }`}\n                                            onClick={() => setSelectedProject(project.id)}\n                                        >\n                                            {project.name}\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    </div>\n\n                    <div className=\"col-span-3\">\n                        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n                            <h2 className=\"text-xl font-bold mb-4\">テンプレート選択</h2>\n                            <ul>\n                                {templates.map(template => (\n                                    <li key={template.id} className=\"mb-2\">\n                                        <button\n                                            className={`w-full text-left px-4 py-2 rounded-lg ${selectedTemplate === template.id\n                                                ? 'bg-blue-500 text-white'\n                                                : 'bg-gray-200 text-gray-700'\n                                                }`}\n                                            onClick={() => setSelectedTemplate(template.id)}\n                                        >\n                                            <AiOutlineFile className=\"inline-block mr-2\" />\n                                            {template.name}\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    </div>\n\n                    <div className=\"col-span-6\">\n                        <div className=\"bg-white p-6 rounded-lg shadow-md flex flex-col items-center\">\n                            <h2 className=\"text-xl font-bold mb-4\">作成開始</h2>\n\n                            <div className=\"relative w-1/4 mb-4\">\n                                <CircularProgressbar value={progress} text={`${progress}%`} />\n                            </div>\n\n                            <button\n                                className={`px-8 py-2 mt-4 text-white rounded-lg font-medium ${selectedProject && selectedTemplate\n                                    ? 'bg-orange-500'\n                                    : 'bg-gray-400 cursor-not-allowed'\n                                    }`}\n                                disabled={!selectedProject || !selectedTemplate || isGenerating}\n                                onClick={handleGenerate}\n                            >\n                                <BsFillPlayFill className=\"inline-block align-middle mr-2\" />\n                                {isGenerating ? '作成中...' : '作成開始'}\n                            </button>\n\n                            {progress === 100 && (\n                                <p className=\"text-green-600 mt-4\">提案資料が完成しました！</p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProposalCreation;"
    },
    {
      "fileName": "progress-report.ts",
      "handleProcedure": "1. データベースからプロジェクトの全アクティビティログを取得\n2. 指定された期間のデータをフィルタリング\n3. 各フェーズの進捗率を計算\n4. 全体の進捗率を算出\n5. 主要な課題や遅延要因を特定\n6. グラフと表を含むレポートを生成\n7. 生成されたレポートをデータベースに保存\n8. レポートのサマリーと閲覧用URLをクライアントに送信",
      "relatedScreen": "SCR-010",
      "handleName": "進捗レポート生成",
      "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する",
      "id": "BAC-009",
      "category": "レポーティング",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport supabase from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { AiOutlineLoading3Quarters } from 'react-icons/ai';\nimport { format } from 'date-fns';\nimport Link from 'next/link';\n\nexport default function ProgressReport() {\n    const router = useRouter();\n    const [projects, setProjects] = useState([]);\n    const [selectedProject, setSelectedProject] = useState<string | null>(null);\n    const [reportPeriod, setReportPeriod] = useState({ from: '', to: '' });\n    const [isLoading, setLoading] = useState(false);\n    const [progress, setProgress] = useState<number>(0);\n\n    useEffect(() => {\n        const fetchProjects = async () => {\n            const { data, error } = await supabase.from('projects').select('*');\n            if (error) {\n                console.error(error);\n            } else {\n                setProjects(data);\n            }\n        };\n        fetchProjects();\n    }, []);\n\n    const startReportGeneration = async () => {\n        if (!selectedProject || !reportPeriod.from || !reportPeriod.to) {\n            alert('全ての情報を入力してください');\n            return;\n        }\n        setLoading(true);\n        setProgress(0);\n\n        try {\n            const response = await axios.post('/api/progress-report.ts', {\n                project_id: selectedProject,\n                period_from: reportPeriod.from,\n                period_to: reportPeriod.to,\n            });\n            \n            let interval = setInterval(() => {\n                setProgress((prevProgress) => {\n                    if (prevProgress >= 100) {\n                        clearInterval(interval);\n                        setLoading(false);\n                        router.push('/progress-report-display');\n                    }\n                    return prevProgress + 10;\n                });\n            }, 1000);\n        } catch (error) {\n            console.error('レポート生成エラー:', error);\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-[#F8F8F8]\">\n            <Topbar />\n            <div className=\"max-w-7xl mx-auto py-8 px-4\">\n                <h1 className=\"text-3xl font-bold text-[#333]\">進捗レポート生成</h1>\n\n                {/* プロジェクト選択 */}\n                <div className=\"mt-8\">\n                    <label className=\"block text-lg font-medium text-[#333]\">対象プロジェクト</label>\n                    <select value={selectedProject || ''} onChange={(e) => setSelectedProject(e.target.value)} className=\"mt-2 block w-full p-2 border rounded\">\n                        <option value=\"\">プロジェクトを選択してください</option>\n                        {projects.length > 0 ? (\n                            projects.map((project) => (\n                                <option key={project.id} value={project.id}>\n                                    {project.name}\n                                </option>\n                            ))\n                        ) : (\n                            <option>データがありません</option>\n                        )}\n                    </select>\n                </div>\n\n                {/* 期間選択 */}\n                <div className=\"mt-8\">\n                    <label className=\"block text-lg font-medium text-[#333]\">レポート期間</label>\n                    <div className=\"flex space-x-4 mt-2\">\n                        <input\n                            type=\"date\"\n                            value={reportPeriod.from}\n                            onChange={(e) => setReportPeriod({ ...reportPeriod, from: e.target.value })}\n                            className=\"p-2 border rounded w-full\"\n                        />\n                        <span>〜</span>\n                        <input\n                            type=\"date\"\n                            value={reportPeriod.to}\n                            onChange={(e) => setReportPeriod({ ...reportPeriod, to: e.target.value })}\n                            className=\"p-2 border rounded w-full\"\n                        />\n                    </div>\n                </div>\n\n                {/* ボタン */}\n                <div className=\"mt-8\">\n                    <button\n                        onClick={startReportGeneration}\n                        className=\"bg-[#4A90E2] text-white py-2 px-4 rounded-md hover:bg-opacity-90 transition\"\n                    >\n                        生成開始\n                    </button>\n                </div>\n\n                {/* 進捗表示 */}\n                {isLoading && (\n                    <div className=\"mt-8 flex items-center space-x-4\">\n                        <AiOutlineLoading3Quarters className=\"animate-spin text-3xl text-[#4A90E2]\" />\n                        <p className=\"text-lg font-medium text-[#333]\">生成進捗: {progress}%</p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}"
    }
  ]
}
